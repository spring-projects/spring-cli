name: Release Milestone

on:
  # need to be run manually and give release postfix
  workflow_dispatch:
    inputs:
      milestone:
        description: 'Milestone version like, M1 or RC1, etc'
        required: true

jobs:

  # Tag a release version so that matrix build can
  # fetch branch, build and upload artifacts.
  # for this job we also build executable jar and upload that
  # as native builds only need to publish binaries.
  tag:
    runs-on: ubuntu-latest
    outputs:
      project-version: ${{ steps.output.outputs.project-version }}
    name: Tag Release Branch
    steps:
    - uses: actions/checkout@v2
    - name: Configure Milestone Version
      run: |
        ./gradlew milestoneVersion -PspringCliMilestone=${{ github.event.inputs.milestone }}
        echo PROJECT_VERSION=$(./gradlew properties -q | grep "version:" | awk '{print $2}') >> $GITHUB_ENV
    - name: Tag Release
      uses: jvalkeal/build-zoo-handler@v0.0.4
      with:
        tag-release-branch: ${{ env.PROJECT_VERSION }}
        tag-release-tag: ${{ env.PROJECT_VERSION }}
        tag-release-tag-prefix: v
    - name: Output
      id: output
      env:
        PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
      run: |
        echo "project-version=$PROJECT_VERSION" >> $GITHUB_OUTPUT

  # build fatjar as it's only needed once from a linux
  jar:
    runs-on: ubuntu-latest
    needs: [tag]
    name: Build Fatjar
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{needs.tag.outputs.project-version}}
    - uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: 17
        cache: gradle
    - run: |
        ./gradlew clean build
    - uses: actions/upload-artifact@v3
      with:
        name: spring-cli-jar
        path: build/libs/
        retention-days: 1

  # go through matrix build and publish native artifacts
  build:
    runs-on: ${{ matrix.os }}
    needs: [tag, jar]
    strategy:
      fail-fast: false
      matrix:
        include:
        - nickname: macos
          os: macos-latest
          graal: 22.1.0
        - nickname: linux
          os: ubuntu-latest
          graal: 22.1.0
        - nickname: windows
          os: custom-large-windows-2022
          graal: 22.0.0.2
    name: Build ${{ matrix.nickname }}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{needs.tag.outputs.project-version}}
    - uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: 17
        cache: gradle
    - uses: graalvm/setup-graalvm@v1
      with:
        version: ${{ matrix.graal }}
        java-version: 17
        components: native-image
        set-java-home: false
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - run: |
        ./gradlew clean build nativeBuild --no-daemon
    - uses: actions/upload-artifact@v3
      with:
        name: spring-cli-${{ matrix.nickname }}
        path: build/native/nativeCompile/
        retention-days: 1

  # we have a release artifacts so create a github release
  # and attach fatjar and os binaries
  ghrelease:
    runs-on: ubuntu-latest
    needs: [tag, jar, build]
    name: Github Release
    steps:
    - uses: actions/checkout@v2
    - name: Install Tooling
      run: |
        curl -sSL https://github.com/cbroglie/mustache/releases/download/v1.2.2/mustache_1.2.2_linux_amd64.tar.gz | sudo tar -C /usr/local/bin/ --no-same-owner -xzv mustache
    - uses: actions/download-artifact@v3
      with:
        name: spring-cli-linux
        path: ${{runner.temp}}/artifacts/spring-cli-linux
    - uses: actions/download-artifact@v3
      with:
        name: spring-cli-macos
        path: ${{runner.temp}}/artifacts/spring-cli-macos
    - uses: actions/download-artifact@v3
      with:
        name: spring-cli-windows
        path: ${{runner.temp}}/artifacts/spring-cli-windows
    - uses: actions/download-artifact@v3
      with:
        name: spring-cli-jar
        path: ${{runner.temp}}/artifacts/spring-cli-jar
    - name: GitHub Release
      env:
        PROJECT_VERSION: ${{needs.tag.outputs.project-version}}
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        RELEASE_NOTES_FILE: ${{runner.temp}}/release_notes.md5
        RELEASE_NOTES_DATA: ${{runner.temp}}/release_notes_data.json
        RELEASE_NOTES_HEADERS: ${{runner.temp}}/release_notes_headers.json
        RELEASE_NOTES_FOOTERS: ${{runner.temp}}/release_notes_footers.json
        RELEASE_NOTES_ISSUES: ${{runner.temp}}/release_notes_issues.json
      run: |
        gh issue list \
          --milestone $PROJECT_VERSION \
          --label automation/rlnotes-header \
          --state all --json title,body \
          --jq '{headers:map(.),headerslength:(length)}' \
          > $RELEASE_NOTES_HEADERS
        gh issue list \
          --milestone $PROJECT_VERSION \
          --label automation/rlnotes-footer \
          --state all --json title,body \
          --jq '{footers:map(.),footerslength:(length)}' \
          > $RELEASE_NOTES_FOOTERS
        gh issue list \
          --milestone $PROJECT_VERSION \
          --state all --json number,title,labels \
          --jq '{issues:map(select((.labels | length == 0) or (any(.labels[].name; startswith("automation/rlnotes")|not))))}' \
          > $RELEASE_NOTES_ISSUES
        jq -s '{issues:(.[0].issues),headers:(.[1].headers),headerslength:(.[1].headerslength),footers:(.[2].footers), footerslength:(.[2].footerslength)}' \
          $RELEASE_NOTES_ISSUES \
          $RELEASE_NOTES_HEADERS \
          $RELEASE_NOTES_FOOTERS \
          > $RELEASE_NOTES_DATA
        mustache $RELEASE_NOTES_DATA .github/rlnotes.mustache > $RELEASE_NOTES_FILE
        gh release create "v$PROJECT_VERSION" \
          --draft \
          --prerelease \
          --title "$PROJECT_VERSION" \
          --notes-file $RELEASE_NOTES_FILE
        mkdir ${{runner.temp}}/artifacts/out
        cp ${{runner.temp}}/artifacts/spring-cli-linux/spring ${{runner.temp}}/artifacts/out/spring-cli-linux
        cp ${{runner.temp}}/artifacts/spring-cli-macos/spring ${{runner.temp}}/artifacts/out/spring-cli-macos
        cp ${{runner.temp}}/artifacts/spring-cli-windows/spring.exe ${{runner.temp}}/artifacts/out/spring-cli-win.exe
        cp ${{runner.temp}}/artifacts/spring-cli-jar/*.jar ${{runner.temp}}/artifacts/out/
        sleep 5
        gh release upload "v$PROJECT_VERSION" ${{runner.temp}}/artifacts/out/*
